// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Toolbox._3RdPartyConnectors.Sharepoint
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class UpdateItemInListFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UpdateItemInList.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UpdateItemInList", "In order to update and item in a SharePoint list\r\nAs a Warewolf user\r\nI want to a" +
                    " tool that allows updating the item", ProgrammingLanguage.CSharp, new string[] {
                        "sharepoint"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "UpdateItemInList")))
            {
                Dev2.Activities.Specs.Toolbox._3RdPartyConnectors.Sharepoint.UpdateItemInListFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I select \"AcceptanceTesting_Update\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("all items are deleted from the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table1.AddRow(new string[] {
                        "Warewolf Created Item Name 1",
                        "Name"});
            table1.AddRow(new string[] {
                        "Warewolf Created Item Title 1",
                        "Title"});
            table1.AddRow(new string[] {
                        "1",
                        "IntField"});
            table1.AddRow(new string[] {
                        "10.52",
                        "CurrencyField"});
            table1.AddRow(new string[] {
                        "2015/06/12",
                        "DateField"});
            table1.AddRow(new string[] {
                        "2015/06/12 09:00 AM",
                        "DateTimeField"});
            table1.AddRow(new string[] {
                        "False",
                        "BoolField"});
            table1.AddRow(new string[] {
                        "Warewolf Created Text Field 1",
                        "MultilineTextField"});
            table1.AddRow(new string[] {
                        "Warewolf Required Field 1",
                        "RequiredField"});
#line 11
 testRunner.And("I map the list input fields as", ((string)(null)), table1, "And ");
#line 22
 testRunner.When("the sharepoint create list item tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.And("scenerio is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table2.AddRow(new string[] {
                        "Warewolf Created Item Name 2",
                        "Name"});
            table2.AddRow(new string[] {
                        "Warewolf Created Item Title 2",
                        "Title"});
            table2.AddRow(new string[] {
                        "2",
                        "IntField"});
            table2.AddRow(new string[] {
                        "12.52",
                        "CurrencyField"});
            table2.AddRow(new string[] {
                        "2015/06/11",
                        "DateField"});
            table2.AddRow(new string[] {
                        "2015/06/11 11:00 AM",
                        "DateTimeField"});
            table2.AddRow(new string[] {
                        "True",
                        "BoolField"});
            table2.AddRow(new string[] {
                        "Warewolf Created Text Field 2",
                        "MultilineTextField"});
            table2.AddRow(new string[] {
                        "Warewolf Required Field 2",
                        "RequiredField"});
#line 25
 testRunner.And("I map the list input fields as", ((string)(null)), table2, "And ");
#line 36
 testRunner.When("the sharepoint create list item tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.And("scenerio is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update all items in list with static data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdateItemInList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("sharepoint")]
        public virtual void UpdateAllItemsInListWithStaticData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update all items in list with static data", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 41
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.And("I select \"AcceptanceTesting_Update\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Variable"});
            table3.AddRow(new string[] {
                        "Name",
                        "Updated From Warewolf"});
            table3.AddRow(new string[] {
                        "Title",
                        "My Updated Warewolf Acceptance Test Item"});
#line 43
 testRunner.And("I map the list update fields as", ((string)(null)), table3, "And ");
#line 47
 testRunner.And("I have result variable as \"[[Result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.When("the sharepoint update list item tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("the value of \"[[Result]]\" equals \"Success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Field Name",
                        "Variable"});
            table4.AddRow(new string[] {
                        "1",
                        "Name",
                        "Updated From Warewolf"});
            table4.AddRow(new string[] {
                        "2",
                        "Title",
                        "My Updated Warewolf Acceptance Test Item"});
#line 51
 testRunner.And("the debug inputs as", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table5.AddRow(new string[] {
                        "[[Result]] = Success"});
#line 55
 testRunner.And("the debug output as", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update all items in list with static data and filter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdateItemInList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("sharepoint")]
        public virtual void UpdateAllItemsInListWithStaticDataAndFilter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update all items in list with static data and filter", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 60
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.And("I select \"AcceptanceTesting_Update\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Variable"});
            table6.AddRow(new string[] {
                        "Name",
                        "Updated From Warewolf"});
            table6.AddRow(new string[] {
                        "Title",
                        "My Updated Warewolf Acceptance Test Item"});
#line 62
 testRunner.And("I map the list update fields as", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table7.AddRow(new string[] {
                        "IntField",
                        "Equals",
                        "2",
                        "",
                        ""});
#line 66
 testRunner.And("search criteria as", ((string)(null)), table7, "And ");
#line 69
 testRunner.And("I have result variable as \"[[Result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.When("the sharepoint update list item tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.Then("the value of \"[[Result]]\" equals \"Success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 72
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Field Name",
                        "Variable",
                        "Search Type",
                        "Value",
                        "Require All Criteria To Match"});
            table8.AddRow(new string[] {
                        "1",
                        "Name",
                        "Updated From Warewolf",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "2",
                        "Title",
                        "My Updated Warewolf Acceptance Test Item",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "3",
                        "IntField",
                        "",
                        "=",
                        "2",
                        "Yes"});
#line 73
 testRunner.And("the debug inputs as", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table9.AddRow(new string[] {
                        "[[Result]] = Success"});
#line 78
 testRunner.And("the debug output as", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update all items in list with static data and filter contains")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdateItemInList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("sharepoint")]
        public virtual void UpdateAllItemsInListWithStaticDataAndFilterContains()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update all items in list with static data and filter contains", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 83
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
 testRunner.And("I select \"AcceptanceTesting_Update\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Variable"});
            table10.AddRow(new string[] {
                        "Name",
                        "Updated From Warewolf"});
            table10.AddRow(new string[] {
                        "Title",
                        "My Updated Warewolf Acceptance Test Item"});
#line 85
 testRunner.And("I map the list update fields as", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table11.AddRow(new string[] {
                        "Name",
                        "Contains",
                        "2",
                        "",
                        ""});
#line 89
 testRunner.And("search criteria as", ((string)(null)), table11, "And ");
#line 92
 testRunner.And("I have result variable as \"[[Result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.When("the sharepoint update list item tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.Then("the value of \"[[Result]]\" equals \"Success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 95
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Field Name",
                        "Variable",
                        "Search Type",
                        "Value",
                        "Require All Criteria To Match"});
            table12.AddRow(new string[] {
                        "1",
                        "Name",
                        "Updated From Warewolf",
                        "",
                        "",
                        ""});
            table12.AddRow(new string[] {
                        "2",
                        "Title",
                        "My Updated Warewolf Acceptance Test Item",
                        "",
                        "",
                        ""});
            table12.AddRow(new string[] {
                        "3",
                        "Name",
                        "",
                        "Contains",
                        "2",
                        "Yes"});
#line 96
 testRunner.And("the debug inputs as", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table13.AddRow(new string[] {
                        "[[Result]] = Success"});
#line 101
 testRunner.And("the debug output as", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update all items in list with static data and filter contains returns multiple it" +
            "ems")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdateItemInList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("sharepoint")]
        public virtual void UpdateAllItemsInListWithStaticDataAndFilterContainsReturnsMultipleItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update all items in list with static data and filter contains returns multiple it" +
                    "ems", ((string[])(null)));
#line 105
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 106
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
 testRunner.And("I select \"AcceptanceTesting_Update\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Variable"});
            table14.AddRow(new string[] {
                        "Name",
                        "Updated From Warewolf"});
            table14.AddRow(new string[] {
                        "Title",
                        "My Updated Warewolf Acceptance Test Item"});
#line 108
 testRunner.And("I map the list update fields as", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table15.AddRow(new string[] {
                        "Name",
                        "Contains",
                        "Warewolf",
                        "",
                        ""});
#line 112
 testRunner.And("search criteria as", ((string)(null)), table15, "And ");
#line 115
 testRunner.And("I have result variable as \"[[Result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
 testRunner.When("the sharepoint update list item tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.Then("the value of \"[[Result]]\" equals \"Success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 118
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Field Name",
                        "Variable",
                        "Search Type",
                        "Value",
                        "Require All Criteria To Match"});
            table16.AddRow(new string[] {
                        "1",
                        "Name",
                        "Updated From Warewolf",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "2",
                        "Title",
                        "My Updated Warewolf Acceptance Test Item",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "3",
                        "Name",
                        "",
                        "Contains",
                        "Warewolf",
                        "Yes"});
#line 119
 testRunner.And("the debug inputs as", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table17.AddRow(new string[] {
                        "[[Result]] = Success"});
#line 124
 testRunner.And("the debug output as", ((string)(null)), table17, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update all items in list with static data and filter has variable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdateItemInList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("sharepoint")]
        public virtual void UpdateAllItemsInListWithStaticDataAndFilterHasVariable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update all items in list with static data and filter has variable", ((string[])(null)));
#line 128
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 129
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 130
 testRunner.And("I select \"AcceptanceTesting_Update\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Variable"});
            table18.AddRow(new string[] {
                        "Name",
                        "Updated From Warewolf"});
            table18.AddRow(new string[] {
                        "Title",
                        "My Updated Warewolf Acceptance Test Item"});
#line 131
 testRunner.And("I map the list update fields as", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table19.AddRow(new string[] {
                        "IntField",
                        "Equals",
                        "[[filterVal]]",
                        "",
                        ""});
#line 135
 testRunner.And("search criteria as", ((string)(null)), table19, "And ");
#line 138
 testRunner.And("I have a variable \"[[filterVal]]\" with a value \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
 testRunner.And("I have result variable as \"[[Result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.When("the sharepoint update list item tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 141
 testRunner.Then("the value of \"[[Result]]\" equals \"Success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 142
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Field Name",
                        "Variable",
                        "Search Type",
                        "Value",
                        "Require All Criteria To Match"});
            table20.AddRow(new string[] {
                        "1",
                        "Name",
                        "Updated From Warewolf",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "2",
                        "Title",
                        "My Updated Warewolf Acceptance Test Item",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "3",
                        "IntField",
                        "",
                        "=",
                        "[[filterVal]] = 2",
                        "Yes"});
#line 143
 testRunner.And("the debug inputs as", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table21.AddRow(new string[] {
                        "[[Result]] = Success"});
#line 148
 testRunner.And("the debug output as", ((string)(null)), table21, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update all items in list with scalar data and filter has variable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdateItemInList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("sharepoint")]
        public virtual void UpdateAllItemsInListWithScalarDataAndFilterHasVariable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update all items in list with scalar data and filter has variable", ((string[])(null)));
#line 152
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 153
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 154
 testRunner.And("I select \"AcceptanceTesting_Update\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Variable"});
            table22.AddRow(new string[] {
                        "Name",
                        "[[updateName]]"});
            table22.AddRow(new string[] {
                        "Title",
                        "[[updateTitle]]"});
#line 155
 testRunner.And("I map the list update fields as", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table23.AddRow(new string[] {
                        "IntField",
                        "Equals",
                        "[[filterVal]]",
                        "",
                        ""});
#line 159
 testRunner.And("search criteria as", ((string)(null)), table23, "And ");
#line 162
 testRunner.And("I have a variable \"[[filterVal]]\" with a value \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("I have a variable \"[[updateTitle]]\" with a value \"Updated Title from Variable\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.And("I have a variable \"[[updateName]]\" with a value \"Updated Name from Variable\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
 testRunner.And("I have result variable as \"[[Result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
 testRunner.When("the sharepoint update list item tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 167
 testRunner.Then("the value of \"[[Result]]\" equals \"Success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 168
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Field Name",
                        "Variable",
                        "Search Type",
                        "Value",
                        "Require All Criteria To Match"});
            table24.AddRow(new string[] {
                        "1",
                        "Name",
                        "[[updateName]] = Updated Name from Variable",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "2",
                        "Title",
                        "[[updateTitle]] = Updated Title from Variable",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "3",
                        "IntField",
                        "",
                        "=",
                        "[[filterVal]] = 2",
                        "Yes"});
#line 169
 testRunner.And("the debug inputs as", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table25.AddRow(new string[] {
                        "[[Result]] = Success"});
#line 174
 testRunner.And("the debug output as", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update all items in list with recordset data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UpdateItemInList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("sharepoint")]
        public virtual void UpdateAllItemsInListWithRecordsetData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update all items in list with recordset data", ((string[])(null)));
#line 178
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 179
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 180
 testRunner.And("I select \"AcceptanceTesting_Update\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Variable"});
            table26.AddRow(new string[] {
                        "Name",
                        "[[rec(*).name]]"});
            table26.AddRow(new string[] {
                        "Title",
                        "[[rec(*).title]]"});
#line 181
 testRunner.And("I map the list update fields as", ((string)(null)), table26, "And ");
#line 185
 testRunner.And("I have a variable \"[[rec(1).title]]\" with a value \"Updated Title from Variable 1\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.And("I have a variable \"[[rec(1).name]]\" with a value \"Updated Name from Variable 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.And("I have a variable \"[[rec(2).title]]\" with a value \"Updated Title from Variable 2\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.And("I have a variable \"[[rec(2).name]]\" with a value \"Updated Name from Variable 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.And("I have result variable as \"[[Result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 190
 testRunner.When("the sharepoint update list item tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 191
 testRunner.Then("the value of \"[[Result]]\" equals \"Success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 192
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Field Name",
                        "Variable"});
            table27.AddRow(new string[] {
                        "1",
                        "Name",
                        "[[rec(1).name]] = Updated Name from Variable 1"});
            table27.AddRow(new string[] {
                        "",
                        "",
                        "[[rec(2).name]] = Updated Name from Variable 2"});
            table27.AddRow(new string[] {
                        "2",
                        "Title",
                        "[[rec(1).title]] = Updated Title from Variable 1"});
            table27.AddRow(new string[] {
                        "",
                        "",
                        "[[rec(2).title]] = Updated Title from Variable 2"});
#line 193
 testRunner.And("the debug inputs as", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table28.AddRow(new string[] {
                        "[[Result]] = Success"});
#line 199
 testRunner.And("the debug output as", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
