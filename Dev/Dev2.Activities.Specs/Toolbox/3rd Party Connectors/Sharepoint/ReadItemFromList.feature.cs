// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Toolbox._3RdPartyConnectors.Sharepoint
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ReadItemFromListFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ReadItemFromList.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ReadItemFromList", "In order to read an item from a Sharepoint List\r\nAs a Warewolf User\r\nI want a too" +
                    "l that will allow be to provide criteria to find and item \r\n and map the item pr" +
                    "operties to Warewolf variables", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ReadItemFromList")))
            {
                Dev2.Activities.Specs.Toolbox._3RdPartyConnectors.Sharepoint.ReadItemFromListFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("all items are deleted from the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table1.AddRow(new string[] {
                        "Warewolf Created Item Name 1",
                        "Name"});
            table1.AddRow(new string[] {
                        "Warewolf Created Item Title 1",
                        "Title"});
            table1.AddRow(new string[] {
                        "1",
                        "IntField"});
            table1.AddRow(new string[] {
                        "10.52",
                        "CurrencyField"});
            table1.AddRow(new string[] {
                        "2015/06/12",
                        "DateField"});
            table1.AddRow(new string[] {
                        "2015/06/12 09:00 AM",
                        "DateTimeField"});
            table1.AddRow(new string[] {
                        "False",
                        "BoolField"});
            table1.AddRow(new string[] {
                        "Warewolf Created Text Field 1",
                        "MultilineTextField"});
            table1.AddRow(new string[] {
                        "Warewolf Required Field 1",
                        "RequiredField"});
#line 11
 testRunner.And("I map the list input fields as", ((string)(null)), table1, "And ");
#line 22
 testRunner.When("the sharepoint create list item tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read Item from list with no criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReadItemFromList")]
        public virtual void ReadItemFromListWithNoCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Item from list with no criteria", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 26
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table2.AddRow(new string[] {
                        "[[list().id]]",
                        "ID"});
            table2.AddRow(new string[] {
                        "[[list().name]]",
                        "Name"});
            table2.AddRow(new string[] {
                        "[[list().title]]",
                        "Title"});
#line 28
 testRunner.And("I map the list fields as", ((string)(null)), table2, "And ");
#line 33
 testRunner.When("the sharepoint tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("the value of \"[[list(1).id]]\" equals 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
 testRunner.Then("the value of \"[[list(1).name]]\" equals \"name1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.Then("the value of \"[[list(1).title]]\" equals \"Do not delete this item\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.Then("the value of \"[[list(2).id]]\" equals 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.Then("the value of \"[[list(2).name]]\" equals \"name2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.Then("the value of \"[[list(2).title]]\" equals \"Do not delete item 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "Field Name"});
            table3.AddRow(new string[] {
                        "1",
                        "[[list().id]] =",
                        "ID"});
            table3.AddRow(new string[] {
                        "2",
                        "[[list().name]] =",
                        "Name"});
            table3.AddRow(new string[] {
                        "3",
                        "[[list().title]] =",
                        "Title"});
#line 41
 testRunner.And("the debug inputs as", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table4.AddRow(new string[] {
                        "1",
                        "[[list(1).id]] = 1"});
            table4.AddRow(new string[] {
                        "",
                        "[[list(2).id]] = 2"});
            table4.AddRow(new string[] {
                        "2",
                        "[[list(1).name]] = name1"});
            table4.AddRow(new string[] {
                        "",
                        "[[list(2).name]] = name2"});
            table4.AddRow(new string[] {
                        "3",
                        "[[list(1).title]] = Do not delete this item"});
            table4.AddRow(new string[] {
                        "",
                        "[[list(2).title]] = Do not delete item 2"});
#line 46
 testRunner.And("the debug output as", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read Item from Sharepoint list with Equal criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReadItemFromList")]
        public virtual void ReadItemFromSharepointListWithEqualCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Item from Sharepoint list with Equal criteria", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 56
testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table5.AddRow(new string[] {
                        "[[list().id]]",
                        "ID"});
            table5.AddRow(new string[] {
                        "[[list().name]]",
                        "Name"});
            table5.AddRow(new string[] {
                        "[[list().title]]",
                        "Title"});
#line 58
 testRunner.And("I map the list fields as", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table6.AddRow(new string[] {
                        "ID",
                        "Equals",
                        "2",
                        "",
                        ""});
#line 63
 testRunner.And("search criteria as", ((string)(null)), table6, "And ");
#line 66
 testRunner.When("the sharepoint tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
 testRunner.Then("the value of \"[[list(1).id]]\" equals 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 68
 testRunner.Then("the value of \"[[list(1).name]]\" equals \"name2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
 testRunner.Then("the value of \"[[list(1).title]]\" equals \"Do not delete item 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "Field Name"});
            table7.AddRow(new string[] {
                        "1",
                        "[[list().id]] =",
                        "ID"});
            table7.AddRow(new string[] {
                        "2",
                        "[[list().name]] =",
                        "Name"});
            table7.AddRow(new string[] {
                        "3",
                        "[[list().title]] =",
                        "Title"});
#line 71
 testRunner.And("the debug inputs as", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table8.AddRow(new string[] {
                        "1",
                        "[[list(1).id]] = 2"});
            table8.AddRow(new string[] {
                        "2",
                        "[[list(1).name]] = name2"});
            table8.AddRow(new string[] {
                        "3",
                        "[[list(1).title]] = Do not delete item 2"});
#line 76
 testRunner.And("the debug output as", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read Item from Sharepoint list with Greater Than criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReadItemFromList")]
        public virtual void ReadItemFromSharepointListWithGreaterThanCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Item from Sharepoint list with Greater Than criteria", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 83
testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table9.AddRow(new string[] {
                        "[[list().id]]",
                        "ID"});
            table9.AddRow(new string[] {
                        "[[list().name]]",
                        "Name"});
            table9.AddRow(new string[] {
                        "[[list().title]]",
                        "Title"});
#line 85
 testRunner.And("I map the list fields as", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table10.AddRow(new string[] {
                        "ID",
                        ">",
                        "1",
                        "",
                        ""});
#line 90
 testRunner.And("search criteria as", ((string)(null)), table10, "And ");
#line 93
 testRunner.When("the sharepoint tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.Then("the value of \"[[list(1).id]]\" equals 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 95
 testRunner.Then("the value of \"[[list(1).name]]\" equals \"name2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 96
 testRunner.Then("the value of \"[[list(1).title]]\" equals \"Do not delete item 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 97
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "Field Name"});
            table11.AddRow(new string[] {
                        "1",
                        "[[list().id]] =",
                        "ID"});
            table11.AddRow(new string[] {
                        "2",
                        "[[list().name]] =",
                        "Name"});
            table11.AddRow(new string[] {
                        "3",
                        "[[list().title]] =",
                        "Title"});
#line 98
 testRunner.And("the debug inputs as", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table12.AddRow(new string[] {
                        "1",
                        "[[list(1).id]] = 2"});
            table12.AddRow(new string[] {
                        "2",
                        "[[list(1).name]] = name2"});
            table12.AddRow(new string[] {
                        "3",
                        "[[list(1).title]] = Do not delete item 2"});
#line 103
 testRunner.And("the debug output as", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read Item from list with Greater Than Equal criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReadItemFromList")]
        public virtual void ReadItemFromListWithGreaterThanEqualCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Item from list with Greater Than Equal criteria", ((string[])(null)));
#line 109
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 110
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table13.AddRow(new string[] {
                        "[[list().id]]",
                        "ID"});
            table13.AddRow(new string[] {
                        "[[list().name]]",
                        "Name"});
            table13.AddRow(new string[] {
                        "[[list().title]]",
                        "Title"});
#line 112
 testRunner.And("I map the list fields as", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table14.AddRow(new string[] {
                        "ID",
                        ">=",
                        "1",
                        "",
                        ""});
#line 117
  testRunner.And("search criteria as", ((string)(null)), table14, "And ");
#line 120
 testRunner.When("the sharepoint tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
 testRunner.Then("the value of \"[[list(1).id]]\" equals 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
 testRunner.Then("the value of \"[[list(1).name]]\" equals \"name1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 123
 testRunner.Then("the value of \"[[list(1).title]]\" equals \"Do not delete this item\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 124
 testRunner.Then("the value of \"[[list(2).id]]\" equals 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 125
 testRunner.Then("the value of \"[[list(2).name]]\" equals \"name2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 126
 testRunner.Then("the value of \"[[list(2).title]]\" equals \"Do not delete item 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 127
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "Field Name"});
            table15.AddRow(new string[] {
                        "1",
                        "[[list().id]] =",
                        "ID"});
            table15.AddRow(new string[] {
                        "2",
                        "[[list().name]] =",
                        "Name"});
            table15.AddRow(new string[] {
                        "3",
                        "[[list().title]] =",
                        "Title"});
#line 128
 testRunner.And("the debug inputs as", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table16.AddRow(new string[] {
                        "1",
                        "[[list(1).id]] = 1"});
            table16.AddRow(new string[] {
                        "",
                        "[[list(2).id]] = 2"});
            table16.AddRow(new string[] {
                        "2",
                        "[[list(1).name]] = name1"});
            table16.AddRow(new string[] {
                        "",
                        "[[list(2).name]] = name2"});
            table16.AddRow(new string[] {
                        "3",
                        "[[list(1).title]] = Do not delete this item"});
            table16.AddRow(new string[] {
                        "",
                        "[[list(2).title]] = Do not delete item 2"});
#line 133
 testRunner.And("the debug output as", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read Item from Sharepoint list with Less Than criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReadItemFromList")]
        public virtual void ReadItemFromSharepointListWithLessThanCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Item from Sharepoint list with Less Than criteria", ((string[])(null)));
#line 142
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 143
testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 144
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table17.AddRow(new string[] {
                        "[[list().id]]",
                        "ID"});
            table17.AddRow(new string[] {
                        "[[list().name]]",
                        "Name"});
            table17.AddRow(new string[] {
                        "[[list().title]]",
                        "Title"});
#line 145
 testRunner.And("I map the list fields as", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table18.AddRow(new string[] {
                        "ID",
                        "<",
                        "2",
                        "",
                        ""});
#line 150
 testRunner.And("search criteria as", ((string)(null)), table18, "And ");
#line 153
 testRunner.When("the sharepoint tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 154
 testRunner.Then("the value of \"[[list(1).id]]\" equals 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 155
 testRunner.Then("the value of \"[[list(1).name]]\" equals \"name1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 156
 testRunner.Then("the value of \"[[list(1).title]]\" equals \"Do not delete this item\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 157
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "Field Name"});
            table19.AddRow(new string[] {
                        "1",
                        "[[list().id]] =",
                        "ID"});
            table19.AddRow(new string[] {
                        "2",
                        "[[list().name]] =",
                        "Name"});
            table19.AddRow(new string[] {
                        "3",
                        "[[list().title]] =",
                        "Title"});
#line 158
 testRunner.And("the debug inputs as", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table20.AddRow(new string[] {
                        "1",
                        "[[list(1).id]] = 1"});
            table20.AddRow(new string[] {
                        "2",
                        "[[list(1).name]] = name1"});
            table20.AddRow(new string[] {
                        "3",
                        "[[list(1).title]] = Do not delete this item"});
#line 163
 testRunner.And("the debug output as", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read Item from list with Less Than Equal criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReadItemFromList")]
        public virtual void ReadItemFromListWithLessThanEqualCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Item from list with Less Than Equal criteria", ((string[])(null)));
#line 169
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 170
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 171
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table21.AddRow(new string[] {
                        "[[list().id]]",
                        "ID"});
            table21.AddRow(new string[] {
                        "[[list().name]]",
                        "Name"});
            table21.AddRow(new string[] {
                        "[[list().title]]",
                        "Title"});
#line 172
 testRunner.And("I map the list fields as", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table22.AddRow(new string[] {
                        "ID",
                        "<=",
                        "2",
                        "",
                        ""});
#line 177
  testRunner.And("search criteria as", ((string)(null)), table22, "And ");
#line 180
 testRunner.When("the sharepoint tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 181
 testRunner.Then("the value of \"[[list(1).id]]\" equals 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 182
 testRunner.Then("the value of \"[[list(1).name]]\" equals \"name1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 183
 testRunner.Then("the value of \"[[list(1).title]]\" equals \"Do not delete this item\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 184
 testRunner.Then("the value of \"[[list(2).id]]\" equals 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 185
 testRunner.Then("the value of \"[[list(2).name]]\" equals \"name2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 186
 testRunner.Then("the value of \"[[list(2).title]]\" equals \"Do not delete item 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 187
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "Field Name"});
            table23.AddRow(new string[] {
                        "1",
                        "[[list().id]] =",
                        "ID"});
            table23.AddRow(new string[] {
                        "2",
                        "[[list().name]] =",
                        "Name"});
            table23.AddRow(new string[] {
                        "3",
                        "[[list().title]] =",
                        "Title"});
#line 188
 testRunner.And("the debug inputs as", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table24.AddRow(new string[] {
                        "1",
                        "[[list(1).id]] = 1"});
            table24.AddRow(new string[] {
                        "",
                        "[[list(2).id]] = 2"});
            table24.AddRow(new string[] {
                        "2",
                        "[[list(1).name]] = name1"});
            table24.AddRow(new string[] {
                        "",
                        "[[list(2).name]] = name2"});
            table24.AddRow(new string[] {
                        "3",
                        "[[list(1).title]] = Do not delete this item"});
            table24.AddRow(new string[] {
                        "",
                        "[[list(2).title]] = Do not delete item 2"});
#line 193
 testRunner.And("the debug output as", ((string)(null)), table24, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read Item from Sharepoint list with Not Equal criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReadItemFromList")]
        public virtual void ReadItemFromSharepointListWithNotEqualCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Item from Sharepoint list with Not Equal criteria", ((string[])(null)));
#line 202
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 203
testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 204
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table25.AddRow(new string[] {
                        "[[list().id]]",
                        "ID"});
            table25.AddRow(new string[] {
                        "[[list().name]]",
                        "Name"});
            table25.AddRow(new string[] {
                        "[[list().title]]",
                        "Title"});
#line 205
 testRunner.And("I map the list fields as", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table26.AddRow(new string[] {
                        "ID",
                        "<>",
                        "2",
                        "",
                        ""});
#line 210
 testRunner.And("search criteria as", ((string)(null)), table26, "And ");
#line 213
 testRunner.When("the sharepoint tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 214
 testRunner.Then("the value of \"[[list(1).id]]\" equals 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 215
 testRunner.Then("the value of \"[[list(1).name]]\" equals \"name1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 216
 testRunner.Then("the value of \"[[list(1).title]]\" equals \"Do not delete this item\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 217
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "Field Name"});
            table27.AddRow(new string[] {
                        "1",
                        "[[list().id]] =",
                        "ID"});
            table27.AddRow(new string[] {
                        "2",
                        "[[list().name]] =",
                        "Name"});
            table27.AddRow(new string[] {
                        "3",
                        "[[list().title]] =",
                        "Title"});
#line 218
 testRunner.And("the debug inputs as", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table28.AddRow(new string[] {
                        "1",
                        "[[list(1).id]] = 1"});
            table28.AddRow(new string[] {
                        "2",
                        "[[list(1).name]] = name1"});
            table28.AddRow(new string[] {
                        "3",
                        "[[list(1).title]] = Do not delete this item"});
#line 223
 testRunner.And("the debug output as", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read Item from list with Contains criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReadItemFromList")]
        public virtual void ReadItemFromListWithContainsCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Item from list with Contains criteria", ((string[])(null)));
#line 229
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 230
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 231
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table29.AddRow(new string[] {
                        "[[list().id]]",
                        "ID"});
            table29.AddRow(new string[] {
                        "[[list().name]]",
                        "Name"});
            table29.AddRow(new string[] {
                        "[[list().title]]",
                        "Title"});
#line 232
 testRunner.And("I map the list fields as", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table30.AddRow(new string[] {
                        "Title",
                        "Contains",
                        "delete",
                        "",
                        ""});
#line 237
  testRunner.And("search criteria as", ((string)(null)), table30, "And ");
#line 240
 testRunner.When("the sharepoint tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 241
 testRunner.Then("the value of \"[[list(1).id]]\" equals 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 242
 testRunner.Then("the value of \"[[list(1).name]]\" equals \"name1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 243
 testRunner.Then("the value of \"[[list(1).title]]\" equals \"Do not delete this item\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 244
 testRunner.Then("the value of \"[[list(2).id]]\" equals 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 245
 testRunner.Then("the value of \"[[list(2).name]]\" equals \"name2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 246
 testRunner.Then("the value of \"[[list(2).title]]\" equals \"Do not delete item 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 247
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "Field Name"});
            table31.AddRow(new string[] {
                        "1",
                        "[[list().id]] =",
                        "ID"});
            table31.AddRow(new string[] {
                        "2",
                        "[[list().name]] =",
                        "Name"});
            table31.AddRow(new string[] {
                        "3",
                        "[[list().title]] =",
                        "Title"});
#line 248
 testRunner.And("the debug inputs as", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table32.AddRow(new string[] {
                        "1",
                        "[[list(1).id]] = 1"});
            table32.AddRow(new string[] {
                        "",
                        "[[list(2).id]] = 2"});
            table32.AddRow(new string[] {
                        "2",
                        "[[list(1).name]] = name1"});
            table32.AddRow(new string[] {
                        "",
                        "[[list(2).name]] = name2"});
            table32.AddRow(new string[] {
                        "3",
                        "[[list(1).title]] = Do not delete this item"});
            table32.AddRow(new string[] {
                        "",
                        "[[list(2).title]] = Do not delete item 2"});
#line 253
 testRunner.And("the debug output as", ((string)(null)), table32, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read Item from list with Begins With criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReadItemFromList")]
        public virtual void ReadItemFromListWithBeginsWithCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Item from list with Begins With criteria", ((string[])(null)));
#line 262
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 263
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 264
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table33.AddRow(new string[] {
                        "[[list().id]]",
                        "ID"});
            table33.AddRow(new string[] {
                        "[[list().name]]",
                        "Name"});
            table33.AddRow(new string[] {
                        "[[list().title]]",
                        "Title"});
#line 265
 testRunner.And("I map the list fields as", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table34.AddRow(new string[] {
                        "Title",
                        "Begins With",
                        "Do",
                        "",
                        ""});
#line 270
  testRunner.And("search criteria as", ((string)(null)), table34, "And ");
#line 273
 testRunner.When("the sharepoint tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 274
 testRunner.Then("the value of \"[[list(1).id]]\" equals 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 275
 testRunner.Then("the value of \"[[list(1).name]]\" equals \"name1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 276
 testRunner.Then("the value of \"[[list(1).title]]\" equals \"Do not delete this item\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 277
 testRunner.Then("the value of \"[[list(2).id]]\" equals 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 278
 testRunner.Then("the value of \"[[list(2).name]]\" equals \"name2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 279
 testRunner.Then("the value of \"[[list(2).title]]\" equals \"Do not delete item 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 280
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "Field Name"});
            table35.AddRow(new string[] {
                        "1",
                        "[[list().id]] =",
                        "ID"});
            table35.AddRow(new string[] {
                        "2",
                        "[[list().name]] =",
                        "Name"});
            table35.AddRow(new string[] {
                        "3",
                        "[[list().title]] =",
                        "Title"});
#line 281
 testRunner.And("the debug inputs as", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table36.AddRow(new string[] {
                        "1",
                        "[[list(1).id]] = 1"});
            table36.AddRow(new string[] {
                        "",
                        "[[list(2).id]] = 2"});
            table36.AddRow(new string[] {
                        "2",
                        "[[list(1).name]] = name1"});
            table36.AddRow(new string[] {
                        "",
                        "[[list(2).name]] = name2"});
            table36.AddRow(new string[] {
                        "3",
                        "[[list(1).title]] = Do not delete this item"});
            table36.AddRow(new string[] {
                        "",
                        "[[list(2).title]] = Do not delete item 2"});
#line 286
 testRunner.And("the debug output as", ((string)(null)), table36, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read Item from list with Multiple criteria return multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReadItemFromList")]
        public virtual void ReadItemFromListWithMultipleCriteriaReturnMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Item from list with Multiple criteria return multiple results", ((string[])(null)));
#line 295
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 296
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 297
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table37.AddRow(new string[] {
                        "[[list().id]]",
                        "ID"});
            table37.AddRow(new string[] {
                        "[[list().name]]",
                        "Name"});
            table37.AddRow(new string[] {
                        "[[list().title]]",
                        "Title"});
#line 298
 testRunner.And("I map the list fields as", ((string)(null)), table37, "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table38.AddRow(new string[] {
                        "Title",
                        "Contains",
                        "Do",
                        "",
                        ""});
            table38.AddRow(new string[] {
                        "ID",
                        "<=",
                        "2",
                        "",
                        ""});
#line 303
  testRunner.And("search criteria as", ((string)(null)), table38, "And ");
#line 307
 testRunner.When("the sharepoint tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 308
 testRunner.Then("the value of \"[[list(1).id]]\" equals 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 309
 testRunner.Then("the value of \"[[list(1).name]]\" equals \"name1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 310
 testRunner.Then("the value of \"[[list(1).title]]\" equals \"Do not delete this item\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 311
 testRunner.Then("the value of \"[[list(2).id]]\" equals 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 312
 testRunner.Then("the value of \"[[list(2).name]]\" equals \"name2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 313
 testRunner.Then("the value of \"[[list(2).title]]\" equals \"Do not delete item 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 314
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "Field Name"});
            table39.AddRow(new string[] {
                        "1",
                        "[[list().id]] =",
                        "ID"});
            table39.AddRow(new string[] {
                        "2",
                        "[[list().name]] =",
                        "Name"});
            table39.AddRow(new string[] {
                        "3",
                        "[[list().title]] =",
                        "Title"});
#line 315
 testRunner.And("the debug inputs as", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table40.AddRow(new string[] {
                        "1",
                        "[[list(1).id]] = 1"});
            table40.AddRow(new string[] {
                        "",
                        "[[list(2).id]] = 2"});
            table40.AddRow(new string[] {
                        "2",
                        "[[list(1).name]] = name1"});
            table40.AddRow(new string[] {
                        "",
                        "[[list(2).name]] = name2"});
            table40.AddRow(new string[] {
                        "3",
                        "[[list(1).title]] = Do not delete this item"});
            table40.AddRow(new string[] {
                        "",
                        "[[list(2).title]] = Do not delete item 2"});
#line 320
 testRunner.And("the debug output as", ((string)(null)), table40, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read Item from list with Multiple criteria return single results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReadItemFromList")]
        public virtual void ReadItemFromListWithMultipleCriteriaReturnSingleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Item from list with Multiple criteria return single results", ((string[])(null)));
#line 329
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 330
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 331
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table41.AddRow(new string[] {
                        "[[list().id]]",
                        "ID"});
            table41.AddRow(new string[] {
                        "[[list().name]]",
                        "Name"});
            table41.AddRow(new string[] {
                        "[[list().title]]",
                        "Title"});
#line 332
 testRunner.And("I map the list fields as", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table42.AddRow(new string[] {
                        "Title",
                        "Contains",
                        "Do",
                        "",
                        ""});
            table42.AddRow(new string[] {
                        "ID",
                        "<",
                        "2",
                        "",
                        ""});
#line 337
  testRunner.And("search criteria as", ((string)(null)), table42, "And ");
#line 341
 testRunner.When("the sharepoint tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 342
 testRunner.Then("the value of \"[[list(1).id]]\" equals 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 343
 testRunner.Then("the value of \"[[list(1).name]]\" equals \"name1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 344
 testRunner.Then("the value of \"[[list(1).title]]\" equals \"Do not delete this item\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 345
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "Field Name"});
            table43.AddRow(new string[] {
                        "1",
                        "[[list().id]] =",
                        "ID"});
            table43.AddRow(new string[] {
                        "2",
                        "[[list().name]] =",
                        "Name"});
            table43.AddRow(new string[] {
                        "3",
                        "[[list().title]] =",
                        "Title"});
#line 346
 testRunner.And("the debug inputs as", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table44.AddRow(new string[] {
                        "1",
                        "[[list(1).id]] = 1"});
            table44.AddRow(new string[] {
                        "2",
                        "[[list(1).name]] = name1"});
            table44.AddRow(new string[] {
                        "3",
                        "[[list(1).title]] = Do not delete this item"});
#line 351
 testRunner.And("the debug output as", ((string)(null)), table44, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read Item from list with Multiple criteria do not match all criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReadItemFromList")]
        public virtual void ReadItemFromListWithMultipleCriteriaDoNotMatchAllCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read Item from list with Multiple criteria do not match all criteria", ((string[])(null)));
#line 357
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 358
 testRunner.Given("I have a sharepoint source to \"http://rsaklfsvrsharep/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 359
 testRunner.And("I select \"AcceptanceTesting\" list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Field Name"});
            table45.AddRow(new string[] {
                        "[[list().id]]",
                        "ID"});
            table45.AddRow(new string[] {
                        "[[list().name]]",
                        "Name"});
            table45.AddRow(new string[] {
                        "[[list().title]]",
                        "Title"});
#line 360
 testRunner.And("I map the list fields as", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field Name",
                        "Search Type",
                        "Value",
                        "From",
                        "To"});
            table46.AddRow(new string[] {
                        "Title",
                        "Contains",
                        "Do",
                        "",
                        ""});
            table46.AddRow(new string[] {
                        "ID",
                        "<",
                        "2",
                        "",
                        ""});
#line 365
  testRunner.And("search criteria as", ((string)(null)), table46, "And ");
#line 369
 testRunner.And("do not require all criteria to match", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 370
 testRunner.When("the sharepoint tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 371
 testRunner.Then("the value of \"[[list(1).id]]\" equals 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 372
 testRunner.Then("the value of \"[[list(1).name]]\" equals \"name1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 373
 testRunner.Then("the value of \"[[list(1).title]]\" equals \"Do not delete this item\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 374
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "Field Name"});
            table47.AddRow(new string[] {
                        "1",
                        "[[list().id]] =",
                        "ID"});
            table47.AddRow(new string[] {
                        "2",
                        "[[list().name]] =",
                        "Name"});
            table47.AddRow(new string[] {
                        "3",
                        "[[list().title]] =",
                        "Title"});
#line 375
 testRunner.And("the debug inputs as", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table48.AddRow(new string[] {
                        "1",
                        "[[list(1).id]] = 1"});
            table48.AddRow(new string[] {
                        "2",
                        "[[list(1).name]] = name1"});
            table48.AddRow(new string[] {
                        "3",
                        "[[list(1).title]] = Do not delete this item"});
#line 380
 testRunner.And("the debug output as", ((string)(null)), table48, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
